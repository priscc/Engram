{"remainingRequest":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Content_Forms/TerminologyForm.vue?vue&type=style&index=0&id=089cdc31&scoped=true&lang=css&","dependencies":[{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Content_Forms/TerminologyForm.vue","mtime":1594926293350},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJveHsKCXRleHQtYWxpZ246IGxlZnQ7CgliYWNrZ3JvdW5kLWNvbG9yOiAjRkNFNEVDOwp9Cg=="},{"version":3,"sources":["TerminologyForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA;AACA;AACA;AACA","file":"TerminologyForm.vue","sourceRoot":"src/components/Content_Forms","sourcesContent":["** Form: Adding Events **\n\n{ Shows Topic adding event to }\n\n(form for adding events) | (events current in Topic)\n\n****************************************************\n\n<template>\n<div id=\"app\" >\n\t<!-- Events Header -->\n\t<v-row>\n\t\t<v-col class=\"pb-0\" cols=\"8\">\n\t\t\t<h2 style=\"display: inline\">Adding terminology to the: </h2>\n\t\t\t<h2 style=\"display: inline\" class=\"font-weight-light\"><u><i>{{topicSelected}}</i></u></h2>\n\t\t\t<p>** need to put validations on the form</p>\n\t\t\t<!-- Other Terms -->\n\t\t\t<v-expansion-panels v-if=\"topicSelected != ''\" class=\"pt-1\" multiple>\n\t\t\t\t<v-expansion-panel>\n\t\t\t\t\t<v-expansion-panel-header>Terms uploaded in the {{topicSelected}} </v-expansion-panel-header>\n\t\t\t\t\t<v-expansion-panel-content>\n\t\t\t\t\t\t<v-list rounded>\n\t\t\t\t\t\t\t<v-list-item class=\"box\" v-for=\"event in events\" :key=\"event.eventTitle\">\n\t\t\t\t\t\t\t\t<v-row>\n\t\t\t\t\t\t\t\t\t<v-col class=\"d-flex align-center\">\n\t\t\t\t\t\t\t\t\t\t<v-badge class=\"mt-2\" color=\"red accent-4\" :content=\"event.badge\"></v-badge>\n\t\t\t\t\t\t\t\t\t</v-col>\n\t\t\t\t\t\t\t\t\t<v-col cols=\"10 pl-0\">\n\t\t\t\t\t\t\t\t\t\t\t<p class=\"body-1\" style=\"display: inline\"><u>{{event.eventTitle}}</u></p>\n\t\t\t\t\t\t\t\t\t\t\t<p class=\"pl-3\" style=\"display: inline\">({{event.date}})</p>\n\t\t\t\t\t\t\t\t\t</v-col>\n\t\t\t\t\t\t\t\t</v-row>\n\t\t\t\t\t\t\t</v-list-item>\n\t\t\t\t\t\t</v-list>\n\t\t\t\t\t</v-expansion-panel-content>\n\t\t\t\t</v-expansion-panel>\n\t\t\t</v-expansion-panels>\n\t\t</v-col>\n\t</v-row>\n\t<!-- Add Evnet Content -->\n\t<v-container v-if=\"topicSelected != ''\" class=\"mt-6 px-6\" fluid style=\"border:1px solid black; border-radius:10px;\" >\n\t\t<v-row>\n\t\t\t<!-- FORM INPUTS-->\n\t\t\t<v-col>\n\t\t\t\t<v-form ref=\"form\">\n\t\t\t\t\t<!-- Event type & title -->\n\t\t\t\t\t<v-row>\n\t\t\t\t\t\t<v-col cols=\"7\">\n\t\t\t\t\t\t\t<v-text-field label=\"Enter term:\" autocomplete=\"off\" v-model=\"createdEvent.eventTitle\"></v-text-field>\n              <v-text-field label=\"Enter definition:\" autocomplete=\"off\" v-model=\"createdEvent.eventTitle\"></v-text-field>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t\t<!-- Submit Button -->\n\t\t\t\t\t<v-row class=\"pt-5\">\n\t\t\t\t\t\t<v-col class=\"d-flex align-end flex-column\">\n\t\t\t\t\t\t\t<v-btn large color=\"success\" v-on:click.prevent=\"submitData\">SUBMIT</v-btn>\n\t\t\t\t\t\t\t<!-- Reset -->\n\t\t\t\t\t\t\t<v-btn class=\"mt-5\" large outlined color=\"error\" @click=\"reset\">Reset Form</v-btn>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t</v-form>\n\t\t\t</v-col>\n\t\t</v-row>\n\t</v-container>\n</div>\n</template>\n\n<script>\nimport { db } from '@/main'\n\nexport default {\n  props: {\n    topicSelected: String\n  },\n  data: function () {\n    return {\n      markdown: '',\n      topic: '',\n      createdTerms: {\n        eventName: '',\n        contentType: 'Events',\n        eventType: '',\n        eventTitle: '',\n        date: null,\n        content: ''\n      },\n      terms: [],\n      typeOfEvent: ['Cause', 'Turning Points', 'Effect'],\n      menu: false,\n      collectionName: '',\n      url: ''\n    }\n  },\n  methods: {\n    \n    // locatingCollection [wateched]: sets collection name & refresh currnet terms\n    async locatingCollection () {\n      // finding collection name from *SEARCH\n      var id = await db.collection('*SEARCH').where('name', '==', this.topicSelected).get().then(querySnapshot => {\n        var x\n        querySnapshot.forEach(doc => {\n          x = doc.data().collectionName\n          // grabbing the time_period its in\n          var y = doc.data().locationInTIME_PERIODS.doc\n          // this.updateTimePeroid(x, y);\n        })\n        return x\n      })\n      this.collectionName = id\n      // this.mountedTerms()\n    },\n\n    // mountedEvents: adding events to the right\n    async mountedTerm () {\n      this.terms = []\n      const todosRef = db.collection(this.collectionName).doc('Terminology')\n      var terms = await todosRef.get().then(function (doc) {\n        var x = []\n        doc.data().terms.forEach(doc => {\n          x.push(doc)\n        })\n        return x\n      })\n      this.terms = this.organization(terms) // sort events\n    },\n\n    // submitData: called when submit button is pressed\n    async submitData () {\n      console.log('ehy')\n      // grabbing events currently within the topic\n      const updateEvents = await db.collection(this.collectionName).doc('Terminology')\n     \n      this.url = this.createdEvent.eventTitle.replace(/\\s+/g, '').toLowerCase()\n      this.createdEvent.eventName = this.url\n      \n      // UPDATING events of topic\n      this.events.push(this.createdEvent)\n      var x = this.organization(this.events)\n      updateEvents.update({\n        events: x\n      })\n      // this.mountedEvents()\n      // this.updateSearch()\n      this.reset()\n    },\n\n    // updateSearch: updates *SEARCH collection\n    async updateSearch () {\n      db.collection('*SEARCH').doc().set({\n        name: this.createdEvent.eventTitle,\n        typeofContent: 'event',\n        eventName: this.createdEvent.eventName,\n        location: {\n          collection: this.collectionName,\n          doc: 'Events',\n          dataArr: 'events'\n        }\n      })\n    },\n\n\n    // reset: resets form\n    reset () { this.$refs.form.reset() }\n  },\n  watch: {\n    // topicSelected: listens when Topic is change, updates Topic and mounted events\n    topicSelected: function (val) {\n      this.locatingCollection()\n    }\n  },\n  mounted () {\n    this.locatingCollection()\n  }\n}\n</script>\n\n<style type=\"text/css\" scoped>\n\t.box{\n\t\ttext-align: left;\n\t\tbackground-color: #FCE4EC;\n\t}\n</style>\n"]}]}