{"remainingRequest":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Timeline.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Timeline.vue","mtime":1590902453329},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgovKiAxMy4gQmFzaWMgU3R5bGluZyB3aXRoIENTUyAqLwoKLyogU3R5bGUgdGhlIGxpbmVzIGJ5IHJlbW92aW5nIHRoZSBmaWxsIGFuZCBhcHBseWluZyBhIHN0cm9rZSAqLwoubGluZSB7CiAgICBmaWxsOiBub25lOwogICAgc3Ryb2tlOiAjZmZhYjAwOwogICAgc3Ryb2tlLXdpZHRoOiAzOwp9CgovKiBTdHlsZSB0aGUgZG90cyBieSBhc3NpZ25pbmcgYSBmaWxsIGFuZCBzdHJva2UgKi8KLmRvdCB7CiAgICBmaWxsOiAjZmZhYjAwOwogICAgc3Ryb2tlOiAjZmZmOwp9Cgo="},{"version":3,"sources":["Timeline.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Timeline.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t<body></body>\n</template>\n\n\n<!-- <script>\n\nexport default {\n  data: function () {\n    return {\n      chartData: [5,8,20,21,17,14],\n      foo: \"bar\"\n    }\n  }\n}\n</script> -->\n\n<script>\nimport * as d3 from \"d3\"\n\n// 2. Use the margin convention practice \nvar margin = {top: 50, right: 50, bottom: 50, left: 50}\n  , width = window.innerWidth - margin.left - margin.right // Use the window's width \n  , height = window.innerHeight - margin.top - margin.bottom; // Use the window's height\n\n// The number of datapoints\nvar n = 21;\n\n// 5. X scale will use the index of our data\nvar xScale = d3.scaleLinear()\n    .domain([0, n-1]) // input\n    .range([0, width]); // output\n\n// 6. Y scale will use the randomly generate number \nvar yScale = d3.scaleLinear()\n    .domain([0, 1]) // input \n    .range([height, 0]); // output \n\n// 7. d3's line generator\nvar line = d3.line()\n    .x(function(d, i) { return xScale(i); }) // set the x values for the line generator\n    .y(function(d) { return yScale(d.y); }) // set the y values for the line generator \n    .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n// 8. An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\nvar dataset = d3.range(n).map(function(d) { return {\"y\": d3.randomUniform(1)() } })\n\n// 1. Add the SVG to the page and employ #2\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// 3. Call the x axis in a group tag\nsvg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom\n\n// 4. Call the y axis in a group tag\nsvg.append(\"g\")\n    .attr(\"class\", \"y axis\")\n    .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft\n\n// 9. Append the path, bind the data, and call the line generator \nsvg.append(\"path\")\n    .datum(dataset) // 10. Binds data to the line \n    .attr(\"class\", \"line\") // Assign a class for styling \n    .attr(\"d\", line); // 11. Calls the line generator \n\n// 12. Appends a circle for each datapoint \nsvg.selectAll(\".dot\")\n    .data(dataset)\n  .enter().append(\"circle\") // Uses the enter().append() method\n    .attr(\"class\", \"dot\") // Assign a class for styling\n    .attr(\"cx\", function(d, i) { return xScale(i) })\n    .attr(\"cy\", function(d) { return yScale(d.y) })\n    .attr(\"r\", 5);\n\n</script>\n\n<style type=\"text/css\">\n/* 13. Basic Styling with CSS */\n\n/* Style the lines by removing the fill and applying a stroke */\n.line {\n    fill: none;\n    stroke: #ffab00;\n    stroke-width: 3;\n}\n\n/* Style the dots by assigning a fill and stroke */\n.dot {\n    fill: #ffab00;\n    stroke: #fff;\n}\n\n</style>"]}]}