{"remainingRequest":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Content_Forms/EventsForm.vue?vue&type=style&index=0&id=dace355a&scoped=true&lang=css&","dependencies":[{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Content_Forms/EventsForm.vue","mtime":1595101769862},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5ib3h7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQo="},{"version":3,"sources":["EventsForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA","file":"EventsForm.vue","sourceRoot":"src/components/Content_Forms","sourcesContent":["<template>\n\n\t<!-- Add Evnet Content -->\n\t<v-container v-if=\"topicSelected != ''\" class=\"mt-6\" fluid >\n\t\t<v-row>\n\t\t\t<!-- FORM INPUTS-->\n\t\t\t<v-col class=\"py-0\">\n\t\t\t\t<h2 class=\"text-center font-weight-light pb-2\"><u>Events in the {{topicSelected}}</u></h2>\n        <v-form ref=\"form\" style=\"border:1px solid black; border-radius:10px;\" class=\"px-8\">\n          <!-- Event type & title -->\n\t\t\t\t\t<v-row>\n\t\t\t\t\t\t<v-col cols=\"7\">\n\t\t\t\t\t\t\t<v-text-field label=\"Enter event title:\" autocomplete=\"off\" v-model=\"createdEvent.eventTitle\"></v-text-field>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t\t<v-row>\n            <v-col>\n              <v-menu ref=\"menu\" v-model=\"menu\" :close-on-content-click=\"false\" transition=\"scale-transition\" offset-y min-width=\"290px\">\n                <template v-slot:activator=\"{ on }\" >\n                  <v-text-field prepend-icon=\"event\"  v-model=\"createdEvent.date\" label=\"Event Start Date\" readonly v-on=\"on\" ></v-text-field>\n                </template>\n                <v-date-picker ref=\"picker\" v-model=\"createdEvent.date\" type=\"month\" :max=\"new Date().toISOString().substr(0, 10)\" min=\"1-01-01\" @change=\"save\" ></v-date-picker>\n              </v-menu>\n            </v-col>\n\t\t\t\t\t\t<v-col cols=\"6\">\n              <v-select v-model=\"createdEvent.eventType\" :items=\"typeOfEvent\" outlined label=\"Event type:\"></v-select>\n            </v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t\t<!-- Event CONTENT -->\n\t\t\t\t\t<v-row>\n\t\t\t\t\t\t<v-col>\n\t\t\t\t\t\t\tContent: <v-textarea outlined v-model=\"createdEvent.content\"  name=\"inputTextarea\" label=\"Description\"></v-textarea>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t\t<v-col cols=\"6\" class=\"text-wrap\">\n\t\t\t\t\t\t\t<p class=\"mb-0\">Preview:</p>\n\t\t\t\t\t\t\t<div style=\"border-top: 1px solid black \" :key=\"createdEvent.content\" v-markdown>{{createdEvent.content}}</div>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t\t<!-- Submit Button -->\n\t\t\t\t\t<v-row class=\"pt-5\">\n\t\t\t\t\t\t<v-col class=\"d-flex align-end flex-column\">\n\t\t\t\t\t\t\t<v-btn large color=\"success\" v-on:click.prevent=\"submitData\">SUBMIT</v-btn>\n\t\t\t\t\t\t\t<!-- Reset -->\n\t\t\t\t\t\t\t<v-btn class=\"mt-5\" large outlined color=\"error\" @click=\"reset\">Reset Form</v-btn>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t</v-form>\n\t\t\t</v-col>\n\n      <!-- Side Events -->\n      <v-col cols=\"4\" class=\"py-0\">\n        <h2 class=\"text-center font-weight-light pb-2\"><u>Events in the {{topicSelected}}</u></h2>\n          <v-card class=\"mx-auto\" max-width=\"400\" tile >\n            <v-list-item two-line v-for=\"event in events\" :key=\"event.eventTitle\">\n              <v-list-item-content>\n                <v-row>\n                  <v-col cols=\"1\" class=\"ml-3\">\n                    <v-badge color=\"red accent-4\" :content=\"event.badge\"></v-badge>\n                  </v-col>\n                  <v-col>\n                    <v-list-item-title>{{event.eventTitle}}</v-list-item-title>\n                    <v-list-item-subtitle>({{event.date}})</v-list-item-subtitle>\n                  </v-col>\n                </v-row>\n              </v-list-item-content>\n            </v-list-item>\n          </v-card>\n      </v-col>\n\t\t</v-row>\n\t</v-container>\n\n</template>\n\n<script>\nimport { db } from '@/main'\nexport default {\n  props: {\n    topicSelected: String,\n    collection: String,\n    events: Array\n  },\n  data: function () {\n    return {\n      markdown: '',\n      topic: '',\n      createdEvent: {\n        eventName: '',\n        eventType: '',\n        date: null,\n        content: ''\n      },\n      // events: [],\n      typeOfInformation: ['Event', 'Terminology', 'Historical People'],\n      typeOfEvent: ['Cause', 'Turning Points', 'Effect'],\n      menu: false,\n    }\n  },\n  methods: { \n\n    // submitData: called when submit button is pressed\n    async submitData () {\n      this.$props.events.push(this.createdEvent)\n      this.organization()\n\n      this.$emit('update', this.$props.events)\n      // this.reset()\n    },\n    // updateSearch: updates *SEARCH collection\n    async updateSearch () {\n      db.collection('*SEARCH').doc().set({\n        name: this.createdEvent.eventTitle,\n        typeofContent: 'event',\n        eventName: this.createdEvent.eventName,\n        location: {\n          collection: this.collectionName,\n          doc: 'Events',\n          dataArr: 'events'\n        }\n      })\n    },\n\n    // organization: sorts events by start date & add badge # accordingly\n    organization () {\n      var x = this.$props.events\n      x.sort(function (a, b) {\n        a = new Date(a.date)\n        b = new Date(b.date)\n        return b - a\n      })\n      x.forEach((doc, i) => {\n        doc.badge = i + 1\n      })\n      return x\n    },\n\n    // save: used for calendar\n    save (date) { this.$refs.menu.save(date) },\n    // reset: resets form\n    reset () { this.$refs.form.reset() }\n  },\n  watch: {\n    // menu: used for calendar\n    menu (val) {\n      val && setTimeout(() => (this.$refs.picker.activePicker = 'YEAR'))\n    },\n    // topicSelected: listens when Topic is change, updates Topic and mounted events\n    topicSelected: function (val) {\n      this.locatingCollection()\n    }\n  }\n}\n</script>\n\n<style type=\"text/css\" scoped>\n  .box{\n    text-align: left;\n  }\n</style>"]}]}