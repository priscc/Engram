{"remainingRequest":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Content_Forms/EventsForum.vue?vue&type=style&index=0&id=5cfcc3bc&scoped=true&lang=css&","dependencies":[{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Content_Forms/EventsForum.vue","mtime":1594681214975},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJveHsKCXRleHQtYWxpZ246IGxlZnQ7CgliYWNrZ3JvdW5kLWNvbG9yOiAjRkNFNEVDOwp9Cg=="},{"version":3,"sources":["EventsForum.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+PA;AACA;AACA;AACA","file":"EventsForum.vue","sourceRoot":"src/components","sourcesContent":["** Form: Adding Events **\n\n{ Shows Topic adding event to }\n\n(form for adding events) | (events current in Topic)\n\n****************************************************\n\n<template>\n<div id=\"app\" >\n\t<!-- Events Header -->\n\t<v-row>\n\t\t<v-col class=\"pb-0\" cols=\"8\">\n\t\t\t<h2 style=\"display: inline\">Adding event to: </h2>\n\t\t\t<h2 style=\"display: inline\" class=\"font-weight-light\"><u><i>{{topicSelected}}</i></u></h2>\n\t\t\t<p>** need to put validations on the form</p>\n\t\t\t<!-- Events -->\n\t\t\t<v-expansion-panels v-if=\"topicSelected != ''\" class=\"pt-1\" multiple>\n\t\t\t\t<v-expansion-panel>\n\t\t\t\t\t<v-expansion-panel-header>Events uploaded in the {{topicSelected}} </v-expansion-panel-header>\n\t\t\t\t\t<v-expansion-panel-content>\n\t\t\t\t\t\t<v-list rounded>\n\t\t\t\t\t\t\t<v-list-item class=\"box\" v-for=\"event in events\" :key=\"event.eventTitle\">\n\t\t\t\t\t\t\t\t<v-row>\n\t\t\t\t\t\t\t\t\t<v-col class=\"d-flex align-center\">\n\t\t\t\t\t\t\t\t\t\t<v-badge class=\"mt-2\" color=\"red accent-4\" :content=\"event.badge\"></v-badge>\n\t\t\t\t\t\t\t\t\t</v-col>\n\t\t\t\t\t\t\t\t\t<v-col cols=\"10 pl-0\">\n\t\t\t\t\t\t\t\t\t\t\t<p class=\"body-1\" style=\"display: inline\"><u>{{event.eventTitle}}</u></p>\n\t\t\t\t\t\t\t\t\t\t\t<p class=\"pl-3\" style=\"display: inline\">({{event.date}})</p>\n\t\t\t\t\t\t\t\t\t</v-col>\n\t\t\t\t\t\t\t\t</v-row>\n\t\t\t\t\t\t\t</v-list-item>\n\t\t\t\t\t\t</v-list>\n\t\t\t\t\t</v-expansion-panel-content>\n\t\t\t\t</v-expansion-panel>\n\t\t\t</v-expansion-panels>\n\t\t</v-col>\n\t</v-row>\n\t<!-- Add Evnet Content -->\n\t<v-container v-if=\"topicSelected != ''\" class=\"mt-6 px-6\" fluid style=\"border:1px solid black; border-radius:10px;\" >\n\t\t<v-row>\n\t\t\t<!-- FORM INPUTS-->\n\t\t\t<v-col>\n\t\t\t\t<v-form ref=\"form\">\n\t\t\t\t\t<!-- Event type & title -->\n\t\t\t\t\t<v-row>\n\t\t\t\t\t\t<v-col cols=\"7\">\n\t\t\t\t\t\t\t<v-text-field label=\"Enter event title:\" autocomplete=\"off\" v-model=\"createdEvent.eventTitle\"></v-text-field>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\n\t\t\t\t\t<v-row>\n            <v-col>\n              <v-menu  ref=\"menu\" v-model=\"menu\" :close-on-content-click=\"false\" transition=\"scale-transition\" offset-y min-width=\"290px\">\n                <template v-slot:activator=\"{ on }\" >\n                  <v-text-field prepend-icon=\"event\"  v-model=\"createdEvent.date\" label=\"Event Start Date\" readonly v-on=\"on\" ></v-text-field>\n                </template>\n                <v-date-picker ref=\"picker\" v-model=\"createdEvent.date\" type=\"month\" :max=\"new Date().toISOString().substr(0, 10)\" min=\"1-01-01\" @change=\"save\" ></v-date-picker>\n              </v-menu>\n            </v-col>\n\t\t\t\t\t\t<v-col cols=\"5\">\n              <v-select v-model=\"createdEvent.eventType\" :items=\"typeOfEvent\" outlined label=\"Event type:\"></v-select>\n            </v-col>\n\t\t\t\t\t\t<!-- <v-col> -->\n\t\t\t\t\t\t\t<!-- <v-menu  ref=\"menu\" v-model=\"menu\" :close-on-content-click=\"false\" transition=\"scale-transition\" offset-y min-width=\"290px\">\n\t\t\t\t\t\t\t\t<template v-slot:activator=\"{ on }\" >\n\t\t\t\t\t\t\t\t\t<v-text-field prepend-icon=\"event\" label=\"Event End Date\" readonly v-on=\"on\" ></v-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t<v-date-picker ref=\"picker\" v-model=\"createdEvent.date\" type=\"month\" :max=\"new Date().toISOString().substr(0, 10)\" min=\"1-01-01\" @change=\"save\" ></v-date-picker>\n\t\t\t\t\t\t\t</v-menu> -->\n\t\t\t\t\t\t<!-- </v-col> -->\n\t\t\t\t\t</v-row>\n\n\t\t\t\t\t<!-- Event CONTENT -->\n\t\t\t\t\t<v-row>\n\t\t\t\t\t\t<v-col>\n\t\t\t\t\t\t\tContent: <v-textarea outlined v-model=\"createdEvent.content\"  name=\"inputTextarea\" label=\"Description\"></v-textarea>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t\t<v-col cols=\"6\" class=\"text-wrap\">\n\t\t\t\t\t\t\t<p class=\"mb-0\">Preview:</p>\n\t\t\t\t\t\t\t<div style=\"border-top: 1px solid black \" :key=\"createdEvent.content\" v-markdown>{{createdEvent.content}}</div>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t\t<!-- Submit Button -->\n\t\t\t\t\t<v-row class=\"pt-5\">\n\t\t\t\t\t\t<v-col class=\"d-flex align-end flex-column\">\n\t\t\t\t\t\t\t<v-btn large color=\"success\" v-on:click.prevent=\"submitData\">SUBMIT</v-btn>\n\t\t\t\t\t\t\t<!-- Reset -->\n\t\t\t\t\t\t\t<v-btn class=\"mt-5\" large outlined color=\"error\" @click=\"reset\">Reset Form</v-btn>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t</v-form>\n\t\t\t</v-col>\n\t\t</v-row>\n\t</v-container>\n</div>\n</template>\n\n<script>\nimport { db } from '@/main'\n\nexport default {\n  props: {\n    topicSelected: String\n  },\n  data: function () {\n    return {\n      markdown: '',\n      topic: '',\n      createdEvent: {\n        eventName: '',\n        contentType: 'Events',\n        eventType: '',\n        eventTitle: '',\n        date: null,\n        content: ''\n      },\n      events: [],\n      typeOfInformation: ['Event', 'Terminology', 'Historical People'],\n      typeOfEvent: ['Cause', 'Turning Points', 'Effect'],\n      menu: false,\n      collectionName: '',\n      url: ''\n    }\n  },\n  methods: {\n    // STEPs:\n    // 1) mounted locatingCollection()\n    // 1a) search *SEARCH collection\n    // 1b) set Topic which events will be adding to\n    // 2) mountedEvents() is called by locatingCollection - displays events on right\n    // 3) when the sumbit button is clicked, submitData() is called\n    // 3a) creates in eventName\n    // 3b) update topic/Events/ with new event\n    // 3c) update *SEARCH with new event\n    // 4) mountedEvents() is called, update displayed events on right\n\n    // locatingCollection [wateched]: setting Topic which events are added to & refresh right Events\n    async locatingCollection () {\n      // finding collection name from *SEARCH\n      var id = await db.collection('*SEARCH').where('name', '==', this.topicSelected).get().then(querySnapshot => {\n        var x\n        querySnapshot.forEach(doc => {\n          x = doc.data().collectionName\n          // grabbing the time_period its in\n          var y = doc.data().locationInTIME_PERIODS.doc\n          // this.updateTimePeroid(x, y);\n        })\n        return x\n      })\n      this.collectionName = id\n      this.mountedEvents()\n    },\n\n    // mountedEvents: adding events to the right\n    async mountedEvents () {\n      this.events = []\n      const todosRef = db.collection(this.collectionName).doc('Events')\n      var events = await todosRef.get().then(function (doc) {\n        var x = []\n        doc.data().events.forEach(doc => {\n          x.push(doc)\n        })\n        return x\n      })\n      this.events = this.organization(events) // sort events\n    },\n\n    // submitData: called when submit button is pressed\n    async submitData () {\n      console.log('ehy')\n      // grabbing events currently within the topic\n      const updateEvents = await db.collection(this.collectionName).doc(this.createdEvent.contentType)\n      // fill in eventName\n      this.url = this.createdEvent.eventTitle.replace(/\\s+/g, '').toLowerCase()\n      this.createdEvent.eventName = this.url\n      // UPDATING events of topic\n      this.events.push(this.createdEvent)\n      var x = this.organization(this.events)\n      updateEvents.update({\n        events: x\n      })\n      this.mountedEvents()\n      this.updateSearch()\n      this.reset()\n    },\n\n    // updateSearch: updates *SEARCH collection\n    async updateSearch () {\n      db.collection('*SEARCH').doc().set({\n        name: this.createdEvent.eventTitle,\n        typeofContent: 'event',\n        eventName: this.createdEvent.eventName,\n        location: {\n          collection: this.collectionName,\n          doc: 'Events',\n          dataArr: 'events'\n        }\n      })\n    },\n\n    // organization: sorts events by start date & add badge # accordingly\n    organization (x) {\n      x.sort(function (a, b) {\n        a = new Date(a.date)\n        b = new Date(b.date)\n        return b - a\n      })\n      x.forEach((doc, i) => {\n        doc.badge = i + 1\n      })\n      return x\n    },\n\n    // updateTimePeroid: updating topicContent_published if Topic now has content\n    //* ***not used, find if there is a better way to do this\n    async updateTimePeroid (x, y) {\n      var id = await db.collection('*TIME_PERIODS').doc(y)\n      var d = await id.get().then(querySnapshot => {\n        return querySnapshot.data().topics\n      })\n      d.forEach(doc => {\n        if (doc.collectionName == x) {\n          doc.topicContent_published = true\n        }\n      })\n      id.update({\n        topics: d\n      })\n    },\n\n    // save: used for calendar\n    save (date) { this.$refs.menu.save(date) },\n\n    // reset: resets form\n    reset () { this.$refs.form.reset() }\n  },\n  watch: {\n    // menu: used for calendar\n    menu (val) {\n      val && setTimeout(() => (this.$refs.picker.activePicker = 'YEAR'))\n    },\n    // topicSelected: listens when Topic is change, updates Topic and mounted events\n    topicSelected: function (val) {\n      this.locatingCollection()\n    }\n  },\n  mounted () {\n    this.locatingCollection()\n  }\n}\n</script>\n\n<style type=\"text/css\" scoped>\n\t.box{\n\t\ttext-align: left;\n\t\tbackground-color: #FCE4EC;\n\t}\n</style>\n"]}]}