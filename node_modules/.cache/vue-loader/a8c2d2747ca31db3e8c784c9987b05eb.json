{"remainingRequest":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Content_Forms/FormTemp.vue?vue&type=style&index=0&id=880786e4&scoped=true&lang=css&","dependencies":[{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/src/components/Content_Forms/FormTemp.vue","mtime":1594925857859},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/priscilla_cancar/Documents/VueProjects/ap-study-bit2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5ib3h7Cgl0ZXh0LWFsaWduOiBsZWZ0OwoJYmFja2dyb3VuZC1jb2xvcjogI0ZDRTRFQzsKfQo="},{"version":3,"sources":["FormTemp.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HA;AACA;AACA;AACA","file":"FormTemp.vue","sourceRoot":"src/components/Content_Forms","sourcesContent":["** Form: Adding Events **\n\n{ Shows Topic adding event to }\n\n(form for adding events) | (events current in Topic)\n\n****************************************************\n\n<template>\n<div id=\"app\" >\n\t<!-- Events Header -->\n\t<v-row>\n\t\t<v-col class=\"pb-0\" cols=\"8\">\n\t\t\t<h2 style=\"display: inline\">Adding {{id}} to: </h2>\n\t\t\t<h2 style=\"display: inline\" class=\"font-weight-light\"><u><i>{{topicSelected}}</i></u></h2>\n\t\t\t<p>** need to put validations on the form</p>\n\t\t</v-col>\n\t</v-row>\n  <v-row v-if=\"topicSelected != ''\">\n    <v-col>\n          <add-events v-if=\"this.id == 'Events'\" :topicSelected=\"topicSelected\" :items=\"mountedItems\" @sendData=\"update\"></add-events>\n          <add-terms v-if=\"this.id == 'Terminology'\" :topicSelected=\"topicSelected\"></add-terms>\n    </v-col>\n  </v-row>\n\n\n</div>\n</template>\n\n<script>\n\nimport addEvents from '@/components/Content_Forms/EventsForm.vue'\nimport addTerms from '@/components/Content_Forms/TerminologyForm.vue'\nimport { db } from '@/main'\n\nexport default {\n  props: {\n    topicSelected: String\n  },\n  components:{\n    addEvents,\n    addTerms\n  },\n  data: function () {\n    return {\n      id: this.$route.params.id,\n      topic: '',\n      mountedItems: [],\n      collectionName: '',\n    }\n  },\n  methods: {\n\n    // locatingCollection [wateched]: setting Topic which events are added to & refresh right Events\n    async locatingCollection () {\n      // finding collection name from *SEARCH\n      if (this.topicSelected != ''){\n            var id = await db.collection('*SEARCH').where('name', '==', this.topicSelected).get().then(querySnapshot => {\n            var x\n            querySnapshot.forEach(doc => {\n              x = doc.data().collectionName\n              var y = doc.data().locationInTIME_PERIODS.doc\n            })\n            return x\n          })\n          this.collectionName = id\n          console.log(this.collectionName)\n          this.mountedContent()\n      }\n      \n    },\n\n    // mountedEvents: adding events to the right\n    async mountedContent () {\n\n      const todosRef = await db.collection(this.collectionName).doc(this.id);\n      \n      \n      this.mountedItems = await todosRef.get().then(function (doc) {\n          if (this.id == \"Events\")\n            return doc.data().events\n          else\n            return doc.data().items\n      }.bind(this))\n      console.log(this.mountedItems)\n\n    },\n\n    update(e){\n      console.log(e)\n    },\n\n\n    // submitData: called when submit button is pressed\n    async submitData () {\n      // grabbing events currently within the topic\n\n      const updateEvents = await db.collection(this.collectionName).doc(this.createdEvent.contentType)\n      // fill in eventName\n      this.url = this.createdEvent.eventTitle.replace(/\\s+/g, '').toLowerCase()\n      this.createdEvent.eventName = this.url\n      // UPDATING events of topic\n      this.events.push(this.createdEvent)\n      var x = this.organization(this.events)\n      updateEvents.update({\n        events: x\n      })\n      this.mountedEvents()\n      this.updateSearch()\n      this.reset()\n    },\n\n\n  },\n  watch: {\n    // topicSelected: listens when Topic is change, updates Topic and mounted events\n    topicSelected: function (val) {\n      this.locatingCollection()\n    }\n  },\n  mounted () {\n    this.locatingCollection()\n  }\n}\n</script>\n\n<style type=\"text/css\" scoped>\n\t.box{\n\t\ttext-align: left;\n\t\tbackground-color: #FCE4EC;\n\t}\n</style>\n"]}]}